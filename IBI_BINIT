
Q1. Differences between Cookie, Local Storage, and Session Storage:

Cookie:
Cookies are small pieces of data stored in the user's browser.
They have an expiration date and can be persistent across sessions.
Cookies are sent with every HTTP request, increasing the overhead for large amounts of data.
They have a size limit of typically 4KB.
Cookies can be used for client-side and server-side purposes.

Local Storage:
Local Storage is a feature in web browsers that allows websites to store data locally on the user's browser.
It has no expiration date, so the data persists even after closing the browser or rebooting the computer.
Local Storage provides a larger storage capacity (usually up to 5-10 MB) compared to cookies.
Data in Local Storage is only accessible from the same domain that stored it.
Local Storage is primarily used for client-side data storage and doesn't impact server requests like cookies.

Session Storage:
Session Storage is similar to Local Storage but has a crucial difference â€“ the data is cleared when the browsing session ends (when the browser is closed).
Like Local Storage, it has a larger storage capacity compared to cookies, but it is limited to the current session.
Data in Session Storage is also only accessible from the same domain that stored it.
Session Storage is used when data needs to be retained only during the current session.
====================================================================
Q2  

The code will output the number 5 five times with a delay of 100 milliseconds between each output.

Explanation:
The for loop runs from 0 to 4. Inside the loop, the setTimeout function is called five times with different values of i, but with a delay of 100 milliseconds for each call. However, the actual execution of the console.log(i) happens after the loop has finished executing. Therefore, when the timeout is reached, the value of i will be 5 (since the loop has already terminated), and the console.log(i) will print 5 five times.


====================================================================

Q3. Sharding in MongoDB:

Sharding is a data distribution strategy used in MongoDB to horizontally partition data across multiple servers or shards. It allows MongoDB to scale horizontally by distributing data across several machines while still providing the illusion of a single, unified database to the application.

How Sharding Works:

Shards: Each shard is a separate MongoDB database that can reside on its own server or cluster. Each shard holds a specific subset of the data.
Shard Key: MongoDB uses a shard key to determine which shard should store a particular piece of data. The shard key is chosen carefully, and it should be a field that evenly distributes data across the shards to achieve balanced data distribution.
Router (mongos): The router is a component in MongoDB that acts as a proxy between the application and the sharded cluster. It receives queries from the application and routes them to the appropriate shard based on the shard key.
When data is inserted or queried, the router (mongos) determines the appropriate shard based on the shard key and sends the operation to that specific shard. This way, the data is distributed across multiple servers, and each shard can handle a portion of the overall load, allowing the system to scale horizontally.

====================================================================

Q4. Promise Chaining:

Promise chaining is a technique in JavaScript that allows us to perform a series of asynchronous operations in a specific order. It involves chaining multiple .then() or .catch() methods on a Promise to handle the resolved or rejected values and return a new Promise at each step.

Example:

Let's say we have three asynchronous functions that return Promises: getData, processData, and saveData. We want to execute them sequentially.

function getData() {
  return fetch('https://api.example.com/data');
}

function processData(data) {
  return data.map(item => item * 2);
}

function saveData(processedData) {
  return fetch('https://api.example.com/save', {
    method: 'POST',
    body: JSON.stringify(processedData),
    headers: { 'Content-Type': 'application/json' }
  });
}

// Promise chaining

getData()
  .then(response => response.json())
  .then(data => processData(data))
  .then(processedData => saveData(processedData))
  .then(() => console.log('Data saved successfully!'))
  .catch(error => console.error('Error:', error));
In this example, the Promises are chained using .then() after each asynchronous operation. The resolved value of one Promise is passed as an argument to the next .then() in the chain. If an error occurs at any point, it will be caught by the .catch() block at the end of the chain.

====================================================================

 Q5 Higher-Order Components (HOC) in React:

Higher-Order Components (HOC) are a design pattern in React that allows the reuse of component logic. An HOC is a function that takes a component as input and returns a new component with additional props or behaviors.

How HOCs Work:

Accept a Component: The HOC function takes an existing component as its input.

Return a New Component: The HOC returns a new component, often by wrapping the original component with some additional logic or props.

Reusability: The HOC can be used with multiple components to provide consistent behaviors or data.

Example:

Let's create an HOC called withLogging that logs the props of a component whenever it is rendered.

import React from 'react';

// Higher-Order Component
function withLogging(WrappedComponent) {
  class WithLogging extends React.Component {
    componentDidMount() {
      console.log('Props:', this.props);
    }

    render() {
      return <WrappedComponent {...this.props} />;
    }
  }

  return WithLogging;
}

// Example Component
class MyComponent extends React.Component {
  render() {
    return <div>Hello, {this.props.name}!</div>;
  }
}

// Wrap MyComponent with withLogging HOC
const MyComponentWithLogging = withLogging(MyComponent);

// Usage in the application
function App() {
  return <MyComponentWithLogging name="John" />;
}
In this example, withLogging is the HOC. It takes MyComponent as input and returns a new component WithLogging, which logs the props when mounted and then renders MyComponent with the same props.

====================================================================

Q6. Callback Hell:

Callback hell, also known as the Pyramid of Doom, is a situation that arises in asynchronous JavaScript code when multiple nested callbacks are used to handle asynchronous operations. It makes the code difficult to read, understand, and maintain due to the excessive nesting of functions.

Example:

asyncFunc1((result1) => {
  asyncFunc2(result1, (result2) => {
    asyncFunc3(result2, (result3) => {
      // More nested callbacks...
    });
  });
});
Solving Callback Hell:

Named Functions:
Instead of using anonymous functions as callbacks, define named functions for each async operation. This helps in reducing the nesting and makes the code more readable.

function onResult1(result1) {
  asyncFunc2(result1, onResult2);
}

function onResult2(result2) {
  asyncFunc3(result2, onResult3);
}

asyncFunc1(onResult1);
Promises:
Convert the asynchronous functions to return Promises and use .then() to chain them together. This way, the code becomes more linear and easier to read.

asyncFunc1()
  .then(result1 => asyncFunc2(result1))
  .then(result2 => asyncFunc3(result2))
  .then(result3 => {
    // More code with the final result (result3)
  })
  .catch(error => {
    // Handle errors
  });
Async/Await:
Use async and await to write asynchronous code in a synchronous-looking manner. This approach further improves code readability and avoids excessive nesting.

async function processData() {
  try {
    const result1 = await asyncFunc1();
    const result2 = await asyncFunc2(result1);
    const result3 = await asyncFunc3(result2);
    // More code with the final result (result3)
  } catch (error) {
    // Handle errors
  }
}

processData();

====================================================================

Q7. Using Array.reduce() method to reverse the given array:

const arr = [1, 2, 3, 4, 5];

const reversedArr = arr.reduce((acc, current) => {
  acc.unshift(current);
  return acc;
}, []);

console.log(reversedArr); // Output: [5, 4, 3, 2, 1]


====================================================================

Q8. Order of numbers logged to the console:

The order of the numbers logged to the console will be:

1
4
3
2

The first line console.log(1); logs 1 to the console immediately when the script starts executing.

The second line setTimeout(function(){console.log(2)}, 1000); schedules the logging of 2 after a delay of 1000 milliseconds (1 second). However, before the timeout is reached, the script continues executing.

The third line setTimeout(function(){console.log(3)}, 0); schedules the logging of 3 after a delay of 0 milliseconds. Even though the delay is 0, the callback will be executed asynchronously after the current synchronous execution context has finished. So, 3 will be logged after 4.

The fourth line console.log(4); logs 4 to the console immediately after the first log.

After the synchronous execution is done, the event loop will execute the scheduled timeouts. So, after 1 second, 2 will be logged.

Therefore, the final output will be: 1 4 3 2.

====================================================================

Q9. Output of the code and explanation:

Output:

array 1: length=5 last=j,o,n,e,s
array 2: length=5 last=j,o,n,e,s
Explanation:

var arr1 = "john".split('');: This line creates an array arr1 containing individual characters of the string "john". So, arr1 becomes ['j', 'o', 'h', 'n'].

var arr2 = arr1.reverse();: This line reverses the arr1 array in place, meaning the original array is modified, and arr2 now points to the same reversed array. So, arr2 is also ['n', 'h', 'o', 'j'].

var arr3 = "jones".split('');: This line creates a new array arr3 containing individual characters of the string "jones". So, arr3 becomes ['j', 'o', 'n', 'e', 's'].

arr2.push(arr3);: This line pushes the entire arr3 array as a single element to the end of arr2. After this operation, arr2 becomes ['n', 'h', 'o', 'j', ['j', 'o', 'n', 'e', 's']].

console.log("array 1: length=" + arr1.length + " last=" + arr1.slice(-1));: This line logs the length of arr1 (which is 5) and the last element of arr1 using the slice(-1) method. Since arr1 is reversed and contains ['n', 'h', 'o', 'j'], the last element is 'j'.

console.log("array 2: length=" + arr2.length + " last=" + arr2.slice(-1));: This line logs the length of arr2 (which is 5) and the last element of arr2 using the slice(-1) method. The last element is the array ['j', 'o', 'n', 'e', 's'].


====================================================================

Q10. Output of the code and explanation:

The output will be:

1
4
2
3
Explanation:

console.log(1);: This logs 1 to the console immediately when the script starts executing.

setTimeout(printNumber, 0, 2);: This schedules the execution of printNumber(2) after a delay of 0 milliseconds. Even though the delay is 0, the callback will be executed asynchronously after the current synchronous execution context has finished. So, 2 will be logged after 4.

setTimeout(printNumber, 100, 3);: This schedules the execution of printNumber(3) after a delay of 100 milliseconds. So, 3 will be logged after 100 milliseconds.

console.log(4);: This logs 4 to the console immediately after the first log.

Therefore, the final output will be: 1 4 2 3.


====================================================================

Q11. Code with fixed issues and output explanation:

const numbers = [1, 2, 3, 4, 5];

const result = numbers.reduce((acc, num) => {
  if (num % 2 === 0) {
    acc.evens.push(num);
  } else {
    acc.odds.push(num);
  }
  return acc;
}, { odds: [], evens: [] }); // Initialize the accumulator as an object with 'odds' and 'evens' arrays

console.log(result);
Output Explanation:
The given code uses the reduce() method to partition the array numbers into two separate arrays: odds and evens. The accumulator acc is initialized as an object with two properties: odds and evens, each holding the corresponding elements from the original array.

The output will be an object containing two arrays, odds and evens, with the following content:

{ odds: [1, 3, 5], evens: [2, 4] }

The odds array contains odd numbers from the original array [1, 3, 5], and the evens array contains even numbers from the original array [2, 4]. The reduce() method effectively splits the numbers into odd and even groups based on the condition provided in the callback function.





